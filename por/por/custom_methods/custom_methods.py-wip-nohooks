import frappe
from datetime import datetime
from frappe.utils import time_diff_in_hours

def get_por_settings():
    settings = frappe.get_single("POR Settings")

def calculate_rate_and_uom(item_code, custom_date_out, custom_date_returned):
    settings = get_por_settings()

    # Convert string dates to datetime objects and calculate duration
    date_out = datetime.strptime(custom_date_out, '%Y-%m-%d %H:%M:%S')
    date_returned = datetime.strptime(custom_date_returned, '%Y-%m-%d %H:%M:%S')
    duration = time_diff_in_hours(date_returned, date_out)

    # Fetch item price rates based on UOM
    rates = {
        "4hr": frappe.get_value("Item Price", {"item_code": item_code, "uom": "4hr"}, "price_list_rate"),
        "Daily": frappe.get_value("Item Price", {"item_code": item_code, "uom": "Daily"}, "price_list_rate"),
        "Weekly": frappe.get_value("Item Price", {"item_code": item_code, "uom": "Weekly"}, "price_list_rate"),
        "4Week": frappe.get_value("Item Price", {"item_code": item_code, "uom": "4Week"}, "price_list_rate")
    }

    # Determine rate and UOM based on duration
    if duration <= (4 + settings.four_hr_grace):
        uom = "4hr"
        rate = rates['4hr']
    elif duration < 73:
        uom = "Daily"
        full_day_periods = int(duration // 24)
        remainder_hours = duration % 24
        rate = full_day_periods * rates['Daily']
        if remainder_hours > 1:
            four_hour_chunks = int(remainder_hours // settings.overage_billing_interval)
            rate += four_hour_chunks * (rates['Daily'] / settings.daily_divisor)
    elif duration < 169:
        uom = "Weekly"
        rate = rates['Weekly']
    elif duration < 673:
        uom = "4Week"
        full_week_periods = int(duration // 168)
        remainder_days = (duration % 168) / 24
        rate = full_week_periods * rates['4Week']
        if remainder_days >= 3:
            rate += rates['Weekly']
        else:
            rate += remainder_days * rates['Daily']
    else:
        # Consider the cases for durations longer than 673 hours
        uom = "4Week"
        num_4week_periods = int(duration // 672)
        remainder_hours = duration % 672
        rate = num_4week_periods * rates['4Week']
        # Add additional calculation for the remainder using similar logic as above

    return rate, uom
